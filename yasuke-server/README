YASUKE METHODS
==============

Method Name             | Parameters
-----------------------------------------------------------------------------------------------------
issueToken              | tokenId, owner, uri, name, symbol
startAuction            | tokenId, auctionId, startBlock, endBlock, sellNowPrice, minimumBid
placeBid                | tokenId, auctionId
endBid                  | tokenId, auctionId
withdraw                | tokenId, auctionId
cancelAuction           | tokenId, auctionId

Client Side Variables & Types
--------------------
tokenId: int
auctionId: int
owner: address | string
uri: url | string
name: string
symbol: string
startBlock: int 
endBlock: int
sellNowPrice: int (18 decimal places)
minimumBid: int (18 decimal places)

Block Calculations
------------------------------
1 Block is 3 secs. 
To Get Block Number in 7 days time 
If Current Block Number is 1000,
7 days = 7 * 24  * 60 * 60 (in secs)
Block Number in 7 days time = 1000 + ((7 * 24  * 60 * 60)/3);

startBlock = 202,600
endBlock = uses the same logic, but different days (e.g end  block can be in 21 days, which  means 7 above becomes 21)

Metamask Integration
---------------------------------
1. placeBid
      abi = [
        "function issueToken(uint256,address,string,string,string)",
        "function startAuction(uint256,uint256,uint256,uint256,uint256,uint256)",
        "function placeBid(uint256,uint256)",
        "function endBid(uint256,uint256)",
        "function withdraw(uint256,uint256)",
        "function cancelAuction(uint256,uint256)"
  ];

2. yFace = new ethers.utils.Interface(this.abi);

3. placeBid Example

    // Binance Mainnet Chain ID: 56
    // Binance Testnet Chain ID: 97

    const data: string = this.yFace.encodeFunctionData("placeBid", [tokenId, auctionId]);
    const ethValue = "100"; // 5 BNB

    const transactionParameters = {
      nonce: '0x00', // ignored by MetaMask
      //gasPrice: '0x37E11D600', // customizable by user during MetaMask confirmation.
      //gas: '0x12C07', // customizable by user during MetaMask confirmation.
      to: this.contractAddress, // Required except during contract publications.
      from: this.ethereum.selectedAddress, // must match user's active address.
      value: ethers.utils.parseEther(ethValue).toHexString(),
      data: data,
      chainId: this.chainId, // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.
    };

    // txHash is a hex string
    // As with any RPC call, it may throw an error
    console.log(transactionParameters);
    this.ethereum.request({ method: 'eth_sendTransaction', params: [transactionParameters], }).then((txHash: string) => {
      console.log(txHash);
    }, (error: any) => {
      // do something with error
    });


    Making Sure correct chain id is selected
    -----------------------------------------

    this.ethereum.request({ method: 'eth_chainId' }).then((chainId: string) => {
        console.log(`Metamask Chain ID: ${+chainId}`);
        console.log(`Chain ID We want: ${+this.chainId}`);
        if (+this.chainId === +chainId) {
          this.account = accounts[0];
          this.noMetaMask = false;
        } else {
          this.account = "Connect Metamask";
          this.noMetaMask = true;
        }